version: v1.0
name: "\U0001F4AB Elixir Insight ETL - CI Pipeline"
agent:
  machine:
    type: s1-kubernetes
    os_image: ''
  containers:
    - name: main
      image: 'ruby:3.0.4'
    - name: postgres
      image: 'postgres:17'
      env_vars:
        - name: POSTGRES_PASSWORD
          value: postgres
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_DB
          value: myapp_test
    - name: redis
      image: 'redis:7.0'
fail_fast:
  stop:
    when: branch != 'master'
auto_cancel:
  running:
    when: branch != 'master'
  queued:
    when: branch = 'master'
global_job_config:
  prologue:
    commands:
      - checkout
      - cache restore gems-$(checksum Gemfile.lock)
      - cache restore yarn-$(checksum yarn.lock)
      - cache restore nodejs-npm
      - apt-get update && apt-get install -y nodejs npm
      - npm install -g yarn
      - cache store nodejs-npm /usr/local/lib/node_modules
      - bundle config set --local deployment 'true'
      - bundle config set --local path 'vendor/bundle'
      - bundle install
      - yarn install --frozen-lockfile || echo "Skipping if yarn.lock not found"
blocks:
  - name: "\U0001F6E0 Setup and Cache"
    task:
      jobs:
        - name: Install Dependencies
          commands:
            - cache store gems-$(checksum Gemfile.lock) vendor/bundle
            - yarn install --frozen-lockfile || echo "Skipping if yarn.lock not found"
            - cache store yarn-$(checksum yarn.lock) node_modules || true
    dependencies: []
  - name: "\U0001F4E6 Asset Compilation"
    task:
      jobs:
        - name: Precompile Assets
          commands:
            - 'bundle exec rake webpacker:compile || bundle exec rake assets:precompile || echo "No asset compilation needed"'
    dependencies:
      - "\U0001F6E0 Setup and Cache"
  - name: "\U0001F50D Lint Code"
    task:
      jobs:
        - name: Lint JavaScript and CSS
          commands:
            - yarn add eslint stylelint || true
            - 'yarn run eslint . || echo "ESLint not configured, skipping"'
            - 'yarn run stylelint "**/*.scss" || echo "Stylelint not configured, skipping"'
    dependencies:
      - "\U0001F4E6 Asset Compilation"
  - name: "\U0001F9F9 Run RuboCop"
    task:
      jobs:
        - name: Run RuboCop
          commands:
            - bundle exec rubocop
    dependencies:
      - "\U0001F6E0 Setup and Cache"
  - name: "\U0001F6E1️ Security Checks"
    task:
      jobs:
        - name: Brakeman
          commands:
            - bundle exec brakeman --force
        - name: Bundle Audit
          commands:
            - bundle exec bundle-audit check --update
    dependencies:
      - "\U0001F6E0 Setup and Cache"
  - name: "\U0001F6A6 Test Suite"
    task:
      env_vars:
        - name: RAILS_ENV
          value: test
        - name: DATABASE_URL
          value: 'postgres://postgres:postgres@postgres:5432/myapp_test'
        - name: REDIS_URL
          value: 'redis://redis:6379/1'
        - name: KNAPSACK_TEST_FILE_PATTERN
          value: 'spec/**{,/*/**}/*_spec.rb'
        - name: KNAPSACK_REPORT_PATH
          value: knapsack_rspec_report.json
      prologue:
        commands:
          - sleep 5
          - pg_isready -h postgres || (echo "PostgreSQL not ready" && exit 1)
          - 'bundle exec rake db:setup'
      jobs:
        - name: "\U0001F7E2 RSpec Tests"
          parallelism: 5
          commands:
            - 'CI_NODE_TOTAL=$SEMAPHORE_JOB_COUNT CI_NODE_INDEX=$((SEMAPHORE_JOB_INDEX-1)) bundle exec rake "knapsack:rspec[-t ~manual --format RspecJunitFormatter --out report.xml --format documentation]" || bundle exec rspec -t ~manual --format RspecJunitFormatter --out report.xml --format documentation'
      epilogue:
        always:
          commands:
            - '[[ -f report.xml ]] && test-results publish report.xml || echo "No test report generated"'
    dependencies:
      - "\U0001F9F9 Run RuboCop"
      - "\U0001F6E1️ Security Checks"
      - "\U0001F4E6 Asset Compilation"
after_pipeline:
  task:
    jobs:
      - name: "Merge Reports \U0001F4CA"
        commands:
          - test-results gen-pipeline-report || echo "Could not generate pipeline report"
